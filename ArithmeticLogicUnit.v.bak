module ArithmeticLogicUnit (
    input  signed [3:0] a,
    input  signed [3:0] b,
    input  [3:0] sel,
    output reg signed [7:0] y
);

reg signed [7:0] s1;
reg signed [7:0] s2;

always @(*) begin
   
    case (sel[3:0])
        4'b0000: s1 = a + 1;
        4'b0001: s1 = b + 1;
        4'b0010: s1 = a;
        4'b0011: s1 = b;
        4'b0100: s1 = a - 1;
        4'b0101: s1 = a * b;
        4'b0110: s1 = a + b;
        4'b0111: s1 = a - b;
        4'b1000: s2 = ~a + 1; // Two's complement
        4'b1001: s2 = ~b + 1; // Two's complement
        4'b1010: s2 = a & b;
        4'b1011: s2 = a | b;
        4'b1100: s2 = a ^ b;
        4'b1101: s2 = ~(a ^ b); // XNOR
        4'b1110: s2 = ~(a & b); // NAND
        4'b1111: s2 = ~(a | b); // NOR
        default: begin s1 = 0; s2 = 0; end
    endcase

    // Select output from s1 or s2 based on sel[3]
    if (sel[3] == 1'b0)
        y = s1;
    else
        y = s2;
end


endmodule